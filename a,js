function loadlosses() {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', 'get_losses.php', true);

    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4 && xhr.status == 200) {
            var responseData = JSON.parse(xhr.responseText);
            console.log('Received data:', responseData); // Log the received data
            var select = document.getElementById('lossItemId');
            select.innerHTML = ""; // Clear the select options
            for (var i = 0; i < responseData.length; i++) {
                var opt = document.createElement('option');
                opt.value = responseData[i].id; // Set the value to the id
                opt.innerHTML = responseData[i].name; // Set the innerHTML to the name
                opt.setAttribute('lavailableQuantity', responseData[i].avalQuantity); // Set the availableQuantity attribute
                select.appendChild(opt);
            }
            lupdateMaxQuantity(); // Update the max quantity for the initially selected option
        }
    };

    xhr.send();
}

function lupdateMaxQuantity() {
    var select = document.getElementById('lossItemId');
    var input = document.getElementById('avalQuantity'); // Assuming you have an input element with id 'maxQuantity'
    var selectedOption = select.options[select.selectedIndex];
    var maxQuantity = selectedOption.getAttribute('lavailableQuantity');
    input.value = maxQuantity;
}
// Update the max quantity when the selected option changes
document.getElementById('lossItemId').addEventListener('change', lupdateMaxQuantity);
function recordLoss() {
    console.log("sell");
    
    var rowid = document.getElementById('lossItemId').value;
    var quantity = document.getElementById('lossQuantity').value;
    var lossReason = document.getElementById('lossReason').value;
    var maxq = document.getElementById('maxQuantity').value;
    console.log(combinationId+quantity);
    if (!combinationId || !quantity || !sellingPrice || !maxq ) {
        console.log("Inputs cannot be empty.");
        return; // Exit the function
    }
    if (maxq < quantity) {
        alert('The quantity being inserted is greater than the available quantity.');
        return; // Exit the function
    }else{
        console.log('trying:');
        var data = {
            rowid: rowid,
            quantity: quantity,
            lossReason: lossReason
        };
        console.log('Sending data:', data);
        sendDatas('sellItem', data, function (responseData) {
            // Handle the server's response
            console.log("Server response:", responseData);
            // Perform additional actions based on the response
        });
    }

}

function sendDatal(section, data, callback) {
console.log('Sending data:', data);

var xhr = new XMLHttpRequest();
xhr.open('POST', 'get_combinations.php', true);

xhr.setRequestHeader('Content-Type', 'application/json');

xhr.onreadystatechange = function () {
    if (xhr.readyState == 4) {
        console.log('Response:', xhr.responseText);
        if (xhr.status == 200) {
            try {
                var responseData = JSON.parse(xhr.responseText);
                console.log('Parsed Response:', responseData);
                if (typeof handleResponse === 'function') {
                    handleResponses(section);
                }
                if (typeof callback === 'function') {
                    callback(responseData);
                }
            } catch (error) {
                console.log('Error parsing JSON:', error);
                alert('Error parsing JSON');
            }
        } else {
            console.log('Request failed with status:', xhr.status);
            alert('Request failed with status: ' + xhr.status);
        }
    }
};

var jsonData = JSON.stringify(data);

xhr.send(jsonData);
}
